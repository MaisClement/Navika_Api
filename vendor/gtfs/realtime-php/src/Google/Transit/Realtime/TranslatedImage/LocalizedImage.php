<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gtfs-realtime.proto

namespace Google\Transit\Realtime\TranslatedImage;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Google.Transit.Realtime.TranslatedImage.LocalizedImage</code>
 */
class LocalizedImage extends \Google\Protobuf\Internal\Message
{
    /**
     * String containing an URL linking to an image
     * The image linked must be less than 2MB. 
     * If an image changes in a significant enough way that an update is on the consumer side, the producer must update the URL to a new one.
     * The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.
     *
     * Generated from protobuf field <code>string url = 1;</code>
     */
    protected $url = '';
    /**
     * IANA media type as to specify the type of image to be displayed. 
     * The type must start with "image/"
     *
     * Generated from protobuf field <code>string media_type = 2;</code>
     */
    protected $media_type = '';
    /**
     * BCP-47 language code. Can be omitted if the language is unknown or if
     * no i18n is done at all for the feed. At most one translation is
     * allowed to have an unspecified language tag.
     *
     * Generated from protobuf field <code>string language = 3;</code>
     */
    protected $language = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $url
     *           String containing an URL linking to an image
     *           The image linked must be less than 2MB. 
     *           If an image changes in a significant enough way that an update is on the consumer side, the producer must update the URL to a new one.
     *           The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.
     *     @type string $media_type
     *           IANA media type as to specify the type of image to be displayed. 
     *           The type must start with "image/"
     *     @type string $language
     *           BCP-47 language code. Can be omitted if the language is unknown or if
     *           no i18n is done at all for the feed. At most one translation is
     *           allowed to have an unspecified language tag.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Src\GtfsRealtime::initOnce();
        parent::__construct($data);
    }

    /**
     * String containing an URL linking to an image
     * The image linked must be less than 2MB. 
     * If an image changes in a significant enough way that an update is on the consumer side, the producer must update the URL to a new one.
     * The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.
     *
     * Generated from protobuf field <code>string url = 1;</code>
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * String containing an URL linking to an image
     * The image linked must be less than 2MB. 
     * If an image changes in a significant enough way that an update is on the consumer side, the producer must update the URL to a new one.
     * The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.
     *
     * Generated from protobuf field <code>string url = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->url = $var;

        return $this;
    }

    /**
     * IANA media type as to specify the type of image to be displayed. 
     * The type must start with "image/"
     *
     * Generated from protobuf field <code>string media_type = 2;</code>
     * @return string
     */
    public function getMediaType()
    {
        return $this->media_type;
    }

    /**
     * IANA media type as to specify the type of image to be displayed. 
     * The type must start with "image/"
     *
     * Generated from protobuf field <code>string media_type = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setMediaType($var)
    {
        GPBUtil::checkString($var, True);
        $this->media_type = $var;

        return $this;
    }

    /**
     * BCP-47 language code. Can be omitted if the language is unknown or if
     * no i18n is done at all for the feed. At most one translation is
     * allowed to have an unspecified language tag.
     *
     * Generated from protobuf field <code>string language = 3;</code>
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * BCP-47 language code. Can be omitted if the language is unknown or if
     * no i18n is done at all for the feed. At most one translation is
     * allowed to have an unspecified language tag.
     *
     * Generated from protobuf field <code>string language = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setLanguage($var)
    {
        GPBUtil::checkString($var, True);
        $this->language = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(LocalizedImage::class, \Google\Transit\Realtime\TranslatedImage_LocalizedImage::class);

