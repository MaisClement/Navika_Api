<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gtfs-realtime.proto

namespace Google\Transit\Realtime\VehiclePosition;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Carriage specific details, used for vehicles composed of several carriages
 * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
 *
 * Generated from protobuf message <code>Google.Transit.Realtime.VehiclePosition.CarriageDetails</code>
 */
class CarriageDetails extends \Google\Protobuf\Internal\Message
{
    /**
     * Identification of the carriage. Should be unique per vehicle.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>string label = 2;</code>
     */
    protected $label = '';
    /**
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
     *
     * Generated from protobuf field <code>.Google.Transit.Realtime.VehiclePosition.OccupancyStatus occupancy_status = 3;</code>
     */
    protected $occupancy_status = 0;
    /**
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * int32 occupancy_percentage = 4 [default = -1];
     *
     * Generated from protobuf field <code>int32 occupancy_percentage = 4;</code>
     */
    protected $occupancy_percentage = 0;
    /**
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>uint32 carriage_sequence = 5;</code>
     */
    protected $carriage_sequence = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Identification of the carriage. Should be unique per vehicle.
     *     @type string $label
     *           User visible label that may be shown to the passenger to help identify
     *           the carriage. Example: "7712", "Car ABC-32", etc...
     *           This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *     @type int $occupancy_status
     *           Occupancy status for this given carriage, in this vehicle
     *           This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *           OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
     *     @type int $occupancy_percentage
     *           Occupancy percentage for this given carriage, in this vehicle.
     *           Follows the same rules as "VehiclePosition.occupancy_percentage"
     *           -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     *           This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *           int32 occupancy_percentage = 4 [default = -1];
     *     @type int $carriage_sequence
     *           Identifies the order of this carriage with respect to the other
     *           carriages in the vehicle's list of CarriageDetails.
     *           The first carriage in the direction of travel must have a value of 1.
     *           The second value corresponds to the second carriage in the direction
     *           of travel and must have a value of 2, and so forth.
     *           For example, the first carriage in the direction of travel has a value of 1.
     *           If the second carriage in the direction of travel has a value of 3,
     *           consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     *           Carriages without data must be represented with a valid carriage_sequence number and the fields 
     *           without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     *           This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Src\GtfsRealtime::initOnce();
        parent::__construct($data);
    }

    /**
     * Identification of the carriage. Should be unique per vehicle.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Identification of the carriage. Should be unique per vehicle.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>string label = 2;</code>
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * User visible label that may be shown to the passenger to help identify
     * the carriage. Example: "7712", "Car ABC-32", etc...
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>string label = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setLabel($var)
    {
        GPBUtil::checkString($var, True);
        $this->label = $var;

        return $this;
    }

    /**
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
     *
     * Generated from protobuf field <code>.Google.Transit.Realtime.VehiclePosition.OccupancyStatus occupancy_status = 3;</code>
     * @return int
     */
    public function getOccupancyStatus()
    {
        return $this->occupancy_status;
    }

    /**
     * Occupancy status for this given carriage, in this vehicle
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
     *
     * Generated from protobuf field <code>.Google.Transit.Realtime.VehiclePosition.OccupancyStatus occupancy_status = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setOccupancyStatus($var)
    {
        GPBUtil::checkEnum($var, \Google\Transit\Realtime\VehiclePosition_OccupancyStatus::class);
        $this->occupancy_status = $var;

        return $this;
    }

    /**
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * int32 occupancy_percentage = 4 [default = -1];
     *
     * Generated from protobuf field <code>int32 occupancy_percentage = 4;</code>
     * @return int
     */
    public function getOccupancyPercentage()
    {
        return $this->occupancy_percentage;
    }

    /**
     * Occupancy percentage for this given carriage, in this vehicle.
     * Follows the same rules as "VehiclePosition.occupancy_percentage"
     * -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     * int32 occupancy_percentage = 4 [default = -1];
     *
     * Generated from protobuf field <code>int32 occupancy_percentage = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setOccupancyPercentage($var)
    {
        GPBUtil::checkInt32($var);
        $this->occupancy_percentage = $var;

        return $this;
    }

    /**
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>uint32 carriage_sequence = 5;</code>
     * @return int
     */
    public function getCarriageSequence()
    {
        return $this->carriage_sequence;
    }

    /**
     * Identifies the order of this carriage with respect to the other
     * carriages in the vehicle's list of CarriageDetails.
     * The first carriage in the direction of travel must have a value of 1.
     * The second value corresponds to the second carriage in the direction
     * of travel and must have a value of 2, and so forth.
     * For example, the first carriage in the direction of travel has a value of 1.
     * If the second carriage in the direction of travel has a value of 3,
     * consumers will discard data for all carriages (i.e., the multi_carriage_details field).
     * Carriages without data must be represented with a valid carriage_sequence number and the fields 
     * without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
     * This message/field is still experimental, and subject to change. It may be formally adopted in the future.
     *
     * Generated from protobuf field <code>uint32 carriage_sequence = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setCarriageSequence($var)
    {
        GPBUtil::checkUint32($var);
        $this->carriage_sequence = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CarriageDetails::class, \Google\Transit\Realtime\VehiclePosition_CarriageDetails::class);

